---
description: 
globs: 
alwaysApply: true
---
# Cursor Technical Guidelines for E-Commerce Barang Bekas Project

## Project Requirements

1. **Tech Stack**
   - Backend: Node.js with Express (latest version)
   - Database: MySQL (as specified in @schema.sql)
   - Storage: Appwrite (for media files)
   - Containerization: Docker with Docker Compose

2. **Appwrite Configuration**
   - APPWRITE_ENDPOINT=http://tugas-akhir-sbd-appwrite-baa3ca-34-50-95-184.traefik.me/v1
   - APPWRITE_PROJECT_ID=67ec168f001774966f85
   - APPWRITE_API_KEY=standard_7d6c995c99ba4a69561e0d1f3f17bb7b3dde4fb896b913ebaaf947bdf7528be057e90bfe8795a4a07ea9e80ce669e21da87a03acc02691aae32b114e318f4b039cd2ef24f81e7d85d263fff96f4e44bebab674d6724d5698e2000b2acca2e0b43dc908d8ff600dbd0ff1c2d57b6a82811842609ab34d14f3f8485c473410fee4
   - APPWRITE_BUCKET_ID=67ec16ad001dd1f0a484

3. **Project Structure**
   ```
   /backend
     /config      # Environment variables and configuration
     /controllers # Route controllers (user, barang, transaksi, etc.)
     /models      # Database models following @schema.sql
     /routes      # API routes
     /middleware  # Authentication, validation, etc.
     /utils       # Helper functions
     /tests       # Unit tests
     /docker      # Docker related files
   ```

4. **Code Standards**
   - Follow clean code principles and best practices
   - Use modern JavaScript features (ES6+)
   - Consistent error handling with appropriate status codes
   - Implement proper input validation
   - Follow RESTful API design principles

5. **Database Implementation**
   - Strictly follow @schema.sql for table design
   - Use appropriate indexing as defined in the schema
   - Implement proper relationships and constraints
   - Use transactions for operations affecting multiple tables

6. **Authentication & Security**
   - Implement JWT-based authentication
   - Use bcrypt for password hashing
   - Store sensitive information in environment variables
   - Implement proper CORS configuration
   - Validate and sanitize all user inputs

7. **Deployment Configuration**
   - Docker Compose setup with:
     - Node.js application container
     - MySQL database container
     - Volume mapping for persistent data
   - Production-ready configuration
   - Environment-specific variables

8. **API Features**
   - Follow requirements in @srs.md precisely
   - Implement all CRUD operations for users, products, transactions
   - Support for real-time chat functionality
   - Rating and review system
   - Wishlist management
   - Content reporting system

## Dependency Guidelines

1. **Use latest stable versions** of all packages
2. **Core dependencies**:
   - express (web framework)
   - mysql2 (database driver)
   - sequelize (ORM)
   - jsonwebtoken (authentication)
   - bcrypt (password hashing)
   - joi or express-validator (validation)
   - winston (logging)
   - appwrite (storage)
   - cors (CORS handling)
   - helmet (security headers)

## Coding Conventions

### 1. Naming Conventions
- **Files/Directories**: Use camelCase for files, kebab-case for directories
- **Functions**: Use camelCase (e.g., `getUserData()`)
- **Variables**: Use descriptive camelCase names
- **Database**: Follow snake_case as in @schema.sql
- **API Endpoints**: Use kebab-case (e.g., `/api/user-profiles`)

### 2. Code Formatting
- Use consistent indentation (2 spaces)
- Line length limit of 80-100 characters
- Empty line between logical code blocks
- Consistent semicolon use
- Use ESLint with appropriate rules

### 3. JavaScript Best Practices
- Prefer `const` over `let`, avoid `var`
- Use arrow functions for callbacks
- Use destructuring for cleaner code
- Use template literals for string concatenation
- Use async/await for asynchronous operations

### 4. API Design
- Follow RESTful principles
- Use appropriate HTTP methods (GET, POST, PUT, DELETE)
- Use appropriate status codes
- Include descriptive error messages
- Version APIs (e.g., `/api/v1/users`)

### 5. Error Handling
- Implement consistent error handling
- Use try/catch blocks for async operations
- Return standard error response format

### 6. Documentation
- Include JSDoc comments for functions
- Document API endpoints
- Maintain README with setup instructions

### 7. Testing
- Write unit tests for critical functionality
- Test API endpoints
- Validate database operations

### 8. Version Control
- Use descriptive commit messages
- Reference issue numbers in commits when applicable